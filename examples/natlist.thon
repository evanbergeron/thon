impl (some t. (t * (((nat * t) -> t) * (t -> nat)))) with (u l. (unit |  (nat * l))) as
(
    (*nil*)
    fold u l. (unit | (nat * l))
    with left unit : (unit |  (nat * (u l . (unit | (nat * l)))))
    ,
    ((*cons*)
    \ natAndNatList : (nat * (u l. (unit |  (nat * l)))) -> fold u l.(unit |  (nat * l))
    with right natAndNatList : (unit | (nat * (u l. (unit |  (nat * l)))))
    ,
    (*isempty*)
    \ natlist : (u l. (unit |  (nat * l))) ->
        (case (unfold natlist) of
           empty => Z
         | hdAndTl => S Z end))
)
(*
data natlist = Nil | Cons of nat * natlist;
trait Queue a = (nil :: a, cons :: (nat * a) -> a)
impl (trait Queue a) with natlist as
(
nil = nil;
cons = \ (x, l) -> Cons (x, l)
)
*)
