let isempty : (u. (unit |  (nat * 0))) -> nat =
    \ natlist : (u. (unit |  (nat * 0))) ->
        (case (unfold natlist) of
           empty -> S Z
         | hdAndTl -> Z)
in let nil : (u. (unit |  (nat * 0))) =
    fold u . (unit | (nat * 0))
    with left unit : (unit |  (nat * (u . (unit | (nat * 0)))))
in
(isempty nil)
